apply plugin: "java-gradle-plugin"
apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "kotlin-kapt"

gradlePlugin {
  plugins {
    simplePlugin {
      id = "debuglog.plugin" // users will do `apply plugin: "debuglog.plugin"`
      implementationClass = "debuglog.DebugLogGradlePlugin" // entry-point class
    }
  }
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$ktVersion"
  
  // contains classes like Subplugin, SubpluginOption, etc
  implementation "org.jetbrains.kotlin:kotlin-gradle-plugin-api:$ktVersion"

  // Needed to register Subplugin as a service
  compileOnly "com.google.auto.service:auto-service:1.0-rc4"
  kapt "com.google.auto.service:auto-service:1.0-rc4"

  testImplementation "junit:junit:4.12"
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
  }
}

// Add the classpath file to the test runtime classpath
dependencies {
  testRuntimeOnly files(createClasspathManifest)
}